//create TMSHelper
window.TMSHelper = window.TMSHelper || {};

// console: logs to the console if the dev console exists
  TMSHelper.console = function(text)
    {
     if (typeof window.console !== "undefined")
          {
          if (typeof window.console.log !== "undefined" &&  _satellite.buildInfo.environment !== 'production')
            {
            window.console.log(text);
            }
          }
    }; 

// getCookie
  TMSHelper.getCookie= function(cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
        var c = ca[i];
        while (c.charAt(0) == ' ') c = c.substring(1);
        if (c.indexOf(name) != -1) return c.substring(name.length, c.length);
    }
    return "";
};

//setCookie
  TMSHelper.setCookie = function (cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+ d.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";domain=.css.ch;path=/;SameSite=Lax;secure=true";
};

//deleteCookie
TMSHelper.deleteCookie = function(name, path, domain) {
  if( TMSHelper.getCookie( name ) ) {
    document.cookie = name + "=" +
      ((path) ? ";path="+path:"")+
      ((domain)?";domain="+domain:"") +
      ";expires=Thu, 01 Jan 1970 00:00:01 GMT";
  }
};

TMSHelper.findParentNode = function(node) {
                var current = node; 
                var list = [];
                while (current.parentNode != null && current.parentNode != document.documentElement) {
                    list.push(current.parentNode);
                    current = current.parentNode;
                }
                return list
            };

// isEmailLink: checks if a url contains a mailto: prefix
	// returns true or false
	TMSHelper.isEmailLink = function(url) {
		if (url.search("mailto:") !== -1) {
			return true;
		} else {
			return false;
		}
};
	// isPhoneLink: checks if a url contains a tel: prefix
	// returns true or false
	TMSHelper.isPhoneLink = function(url) {
		if (url.search(/^tel:/) !== -1) {
			return true;
		} else {
			return false;
		}
};
	// isDownloadLink: checks if a link matches a predefined set of filetypes to be counted as a download
	// returns true or false
	TMSHelper.isDownloadLink = function(url) {
			var fileTypeString = new RegExp("\\.(?:avi|css|csv|doc|docx|eps|exe|feed|gif|ics|jpg|js|m4v|mov|mp3|pdf|png|ppt|pptx|rar|tab|txt|vsd|vxd|wav|wma|wmv|xls|xlsx|xml|zip)($|\\&|\\?|\\#)");
			// 2.0 test input url against filetype RegEx
			return fileTypeString.test(url);
		
};
    //isSocialLink: checks if a link is social
	TMSHelper.isSocialLink = function(url){

		return /(\.|^)(facebook|twitter|instagram|youtube)\.((?!\.).)*$/.test(slashedURLObject.event_attributes_tgtHostname);
};
    //isOnsiteLink: checks if a link is on or offsite
	TMSHelper.isOnsiteLink = function(url){
		var onsiteDomainString = new RegExp("^" + window.location.hostname + "(\/.*)?");
		return onsiteDomainString.test(url);
		
};
 TMSHelper.URLconstructor = function(url) {
		if (url) {
			// Prepare RegEx for validation
			var startWithProtocol = new RegExp("^[a-zA-Z]*:.*");
			var isProtocolRelative = new RegExp("^\/\/.*");
			var startWithSlash = new RegExp("^\/[^\/].*"); 
			var startWithDot = new RegExp("^\.(\.?)\/.*");
			var startWithHash = new RegExp("^#.*");

			if (startWithProtocol.test(url) || isProtocolRelative.test(url)) {
				TMSHelper.console("[TMSHelper.URLconstructor] Input URL appears to be a valid absolute URL => input not converted");
				return (url);
			} else if (startWithSlash.test(url)) {
				// 1. Does Target URL start with a slash?
				// => add current domain to it
				// 1.1 Get current URL and split it
				var currentURL = window.location.href.split("/");
				// 1.2 Remove the current file name from current URL
				// However, if the current URL is the current folder without trailing slash, this step should be omitted!
				currentURL.pop();
				// 1.3 Re-unite current URL to have current folder
				var currentFolder = currentURL.join("/");
				// 1.4 Concat current folder and input URL
				TMSHelper.console("[TMSHelper.URLconstructor] Input URL completed - from: " + url + " to: " + currentFolder + url);
				return (currentFolder + url);
			} else if (startWithDot.test(url)) {
				// 2. Does input URL start with "./" or "../"?
				// 2.1 Get current URL and split it
				var currentURL = window.location.href.split("/");
				// 2.2 Remove the current file name from current URL
				// However, if the current URL is the current folder without trailing slash, this step should be omitted!
				currentURL.pop();
				// 2.3 Split input URL
				var url_split = url.split("/");
				// 2.4. Walk through input URL and attach relevant values to current URL to create new complete input URL
				for (var i = 0; i < url_split.length; i++) {
					if (url_split[i] == ".") {
						continue;
					} else if (url_split[i] == "..") {
						currentURL.pop();
					} else {
						currentURL.push(url_split[i]);
					}
				}
				// 2.5 Save converted URL
				TMSHelper.console("[TMSHelper.URLconstructor] Input URL completed - from: " + url + " to: " + currentURL.join("/"));
				return (currentURL.join("/"));
			} else if (startWithHash.test(url)) {
				// 3. Does input URL start with hash?
				// => add current URL to it
				if (window.location.href.indexOf('#') === -1) { // if current URL has anchor, cut off the anchor and replace it with the new anchor
					TMSHelper.console("[TMSHelper.URLconstructor] Input URL completed - from: " + url + " to: " + window.location.href + url);
					return (window.location.href + url);
				} else {
					TMSHelper.console("[TMSHelper.URLconstructor] Input URL completed - from: " + url + " to: " + window.location.href.substring(0, window.location.href.indexOf('#')) + url);
					return (window.location.href.substring(0, window.location.href.indexOf('#')) + url);
				}
			} else {
				// Get directory of currently viewed document.
				var currentDirectory = window.location.pathname.split("/");
				currentDirectory.pop();

				// Manually combine window.location properties to emulate
				// window.location.origin, since this property isn't supported by IE.
				var windowLocationOrigin = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ':' + window.location.port: '');

				// If the current URL does not have a slash after the host name, we
				// append the passed URL to the location origin to create an absolute
				// URL.
				if (currentDirectory.length === 0) {
					var completeURL = windowLocationOrigin + '/' + currentDirectory.join('/') + url;

					TMSHelper.console("[TMSHelper.URLconstructor] Input URL completed - from: " + url + " to: " + completeURL);
					return completeURL;
				}

				// If we've reached this point, the URL contains at least one slash
				// after the host name, which means we can remove everything after the
				// last slash and append the passed URL.
				currentURL = window.location.href.split("/");
				currentURL.pop();
				var url_split = url.split("/");
				for (var i = 0; i < url_split.length; i++) {
					if (url_split[i] == ".") {
						continue;
					} else if (url_split[i] == "..") {
						currentURL.pop();
					} else {
						currentURL.push(url_split[i]);
					}
				}

				TMSHelper.console("[TMSHelper.URLconstructor] Input URL completed - from: " + url + " to: " + currentURL.join("/"));
				return (currentURL.join("/"));
			}
		} else {
			TMSHelper.console("[TMSHelper.URLconstructor] Input URL is empty, nothing to convert");
			return (url);
		}
	};

// URLslasher: splits a URL into all necessary parts
	// type denotes either target, page
	TMSHelper.URLslasher= function(type, url) {
		// initialise empty object to work with later on
		slashedURLObject = {};
		if (url !== "") {
			// Check if input URL doesn't contain a protocol
			// if not add a protocol, so the property "href" (see below) works
			var startWithDoubleSlash = new RegExp("^\/\/.*"); // string starts with double slashes
			var startWithProtocol = new RegExp("^[a-zA-Z]*:.*"); // the "normal" case we want to see
			var parser, correct_pathname;
			if (startWithDoubleSlash.test(url)) { // should not happen, but if it still does, we fix it!
				url = window.location.protocol + url;
			} else if (!(startWithProtocol.test(url))) { // if protocol is missing, add current page's protocol per default
				url = window.location.protocol + "//" + url;
			}
			// Create new link element on page
			parser = document.createElement('a');
			// Use attribute "href" to turn observed input into a URL-shaped object
			parser.href = url;
			if( typeof(parser.protocol) !== 'undefined' && parser.protocol.match(/http/i) ){
				correct_pathname = (parser.pathname.charAt(0) !== '/' ? '/' : '') + parser.pathname;
				if (type == "target") {
					slashedURLObject['event_attributes_tgtURL'] = url;
					slashedURLObject['event_attributes_tgtHostname'] = parser.hostname;
					slashedURLObject['event_attributes_tgtPath'] = correct_pathname;    
					slashedURLObject['event_attributes_tgtQuery'] = parser.search.replace('?', '');
					slashedURLObject['event_attributes_tgtURLfragmentIdentifier'] = parser.hash.replace('#', '');
					TMSHelper.console("[TMSHelper.URLslasher] URL slashed into >" + type + "< TMS variables");
				} else if (type == "page") {
					slashedURLObject['page.attributes.URL'] = url;
					slashedURLObject['page.attributes.URLHostname'] = parser.hostname;
					slashedURLObject['page.attributes.URLPath'] = correct_pathname; 
					slashedURLObject['page.attributes.URLQueryString'] = parser.search.replace('?', '');
					slashedURLObject['page.attributes.URLFragment'] = parser.hash.replace('#', '');
					TMSHelper.console("[TMSHelper.URLslasher] URL slashed into >" + type + "< TMS variables");
				}  else {
					TMSHelper.console("[TMSHelper.URLslasher] type of URL not given, URL not slashed into TMS variables");
				}
			} else {
				TMSHelper.console("[TMSHelper.URLslasher] protocol of URL is not http, URL not slashed into TMS variables");
			}
		} else {
			TMSHelper.console("[TMSHelper.URLslasher] input URL is empty, nothing to slash into bits");
		}
		return slashedURLObject;
	};

// fills s.prop i with the value of s.eVar i, works analagous to fillEvarWithProp
TMSHelper.fillPropWithEvar = function(evarArr, aaObject)
    {
    for (k=0, kk=evarArr.length; k < kk; k++)
       { 
       if(aaObject['eVar'+evarArr[k]]){
       aaObject['prop'+evarArr[k]] = 'D=v'+evarArr[k]; // uses the dynamic variable writing method to save characters in the HTTP request
       }
       } 
   };

TMSHelper.dataLayerPush = function (scope) 
  {
  var dataLayerEvent;
  if(scope == 'target'){
     dataLayerEvent = {
                    eventInfo: {
                        category: s.eVar14,
                        action: s.eVar15
                    },
                    attributes:{
                      label: s.eVar16,
                      tgtURL: s.eVar87,
                      tgtHostname: s.eVar88,
                      tgtPath: s.eVar89,
                      tgtQuery: s.eVar90
                    }
}
}
  else if(scope == 'local'){
     dataLayerEvent = {
                    eventInfo: {
                        category: s.eVar14,
                        action: s.eVar15
                    },
                    attributes:{
                      label: s.eVar16,
                    }
                }
    }
  else if(scope == 'page'){
  dataLayerEvent = {
                    eventInfo: {
                        category: 'page_load',
                        action: 'default'
                    },
                    attributes:{
                      label: 'default'
                    }
                }
  }

digitalData.event = digitalData.event || []

digitalData.event.push(dataLayerEvent);
};

 TMSHelper.addToLocalStorageArray = function (name, value) 
 {
	// Get the existing data
	var existing = localStorage.getItem(name);

	// If no existing data, create an array
	// Otherwise, convert the localStorage string to an array
	existing = existing ? existing.split(',') : [];

	// Add new data to localStorage Array
	existing.push(value);

	// Save back to localStorage
	localStorage.setItem(name, existing.toString());
};
TMSHelper.piiChecker = function(){

  //check for IE11
  if(Object.values){
var dimensions = { 

URL : 			_satellite.getVar('DataLayer - page.attributes.URL'), 
URLQuery:		_satellite.getVar('DataLayer - page.attributes.URLQueryString')

}
var regex_collection = {

'regex_at' : /[^\/]{4}(@|%40)[^\/]{4}/gi,
'regex_name' : /.*vorname=.*/,
'regex_mail' : /.*mail=.*/,
'regex_user' : /.*user=.*/

}

var size = Object.keys(dimensions).length;
var size2 = Object.keys(regex_collection).length;

var i;
var ii;
for(ii = 0; ii< size2 ; ii++){
	for (i = 0; i < size; i++) {
	if(Object.values(regex_collection)[ii].test(Object.values(dimensions)[i])){
	//TMSHelper.console('PII found');
	var index = Object.values(dimensions)[i].indexOf('?');
	Object(dimensions)[Object.keys(dimensions)[i]] = Object(dimensions)[Object.keys(dimensions)[i]].slice(0,index) + '[PII DATA]'
	}
	else{
	//TMSHelper.console('No PII found');
	}
}

}
//copy elements
s.eVar19        = Object.values(dimensions)[0];
s.eVar28	    = Object.values(dimensions)[1];
  }
};

TMSHelper.removeEmojis = function(string) {
  var regex = /(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff]|[\u0023-\u0039]\ufe0f?\u20e3|\u3299|\u3297|\u303d|\u3030|\u24c2|\ud83c[\udd70-\udd71]|\ud83c[\udd7e-\udd7f]|\ud83c\udd8e|\ud83c[\udd91-\udd9a]|\ud83c[\udde6-\uddff]|\ud83c[\ude01-\ude02]|\ud83c\ude1a|\ud83c\ude2f|\ud83c[\ude32-\ude3a]|\ud83c[\ude50-\ude51]|\u203c|\u2049|[\u25aa-\u25ab]|\u25b6|\u25c0|[\u25fb-\u25fe]|\u00a9|\u00ae|\u2122|\u2139|\ud83c\udc04|[\u2600-\u26FF]|\u2b05|\u2b06|\u2b07|\u2b1b|\u2b1c|\u2b50|\u2b55|\u231a|\u231b|\u2328|\u23cf|[\u23e9-\u23f3]|[\u23f8-\u23fa]|\ud83c\udccf|\u2934|\u2935|[\u2190-\u21ff])/g;
  if(regex.test(string)){
  string = string.replace(regex, '[Sonderzeichen erkannt]');
  return string;
  }
  else{
  return string;
  }
}

TMSHelper.removeComma = function(string){
  if(string.indexOf(',') > -1){
  string = string.replace(',','');
  s.eVar12 = string;
  }
}

TMSHelper.s_getLoadTime = function()
{
  if(!window.s_loadT){
  var b=new Date().getTime(),o=window.performance?performance.timing:0,a=o?o.requestStart:window.inHeadTS||0;s_loadT=a?Math.round((b-a)/100):''}
  s_loadT = s_loadT.toString();
  if(s_loadT.length == 2){
  var first = s_loadT.slice(0,1)
  var second = s_loadT.slice(1,2)
  s_loadT = first + "." + second;
  TMSHelper.console("Ladezeit DOM Ready: " + s_loadT + "s");
  }
  else if(s_loadT.length == 1){
  s_loadT = "0" + "." + s_loadT;
  TMSHelper.console("Ladezeit DOM Ready: " + s_loadT + "s");
  }
  else if(s_loadT.length == 3){
  var first = s_loadT.slice(0,2)
  var second = s_loadT.slice(2,3)
  s_loadT = first + "." + second;
  TMSHelper.console("Ladezeit DOM Ready: " + s_loadT + "s");
  }
  else{
  //do nothing
  }
  return s_loadT;
}
